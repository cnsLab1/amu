1. CEASER CIPHER

#include <stdio.h>
#include <ctype.h>
#include<string.h>


// Function to perform Caesar cipher encryption
void caesarEncrypt(char *message, int key) {
    int i = 0;
    char ch;

    while (message[i]) {
        ch = message[i];

        if (isalpha(ch)) {
            if (isupper(ch)) {
                ch = (ch - 'A' + key) % 26 + 'A';
            } else {
                ch = (ch - 'a' + key) % 26 + 'a';
            }
        }

        message[i] = ch;
        i++;
    }
}

// Function to perform Caesar cipher decryption
void caesarDecrypt(char *message, int key) {
    int i = 0;
    char ch;

    while (message[i]) {
        ch = message[i];

        if (isalpha(ch)) {
            if (isupper(ch)) {
                ch = (ch - 'A' - key + 26) % 26 + 'A';
            } else {
                ch = (ch - 'a' - key + 26) % 26 + 'a';
            }
        }

        message[i] = ch;
        i++;
    }
}

int main() {
    char message[100];
    int key;

    printf("Enter the message to encrypt: ");
    fgets(message, sizeof(message), stdin);
    //scanf("%s",message);

    printf("Enter the key (a positive integer): ");
    scanf("%d", &key);

    // Remove trailing newline from the message
    // message[strcspn(message, "\n")] = '\0';

    printf("Original message: %s\n", message);

    // Encrypt the message
    caesarEncrypt(message, key);
    printf("Encrypted message: %s\n", message);

    // Decrypt the encrypted message
    caesarDecrypt(message, key);
    printf("Decrypted message: %s\n", message);

    return 0;
}


2. PLAYFAIR CIPHER

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include<ctype.h>

#define SIZE 30

void toLowerCase(char *plain, int ps)
{
    int i;
    for (i = 0; i < ps; i++) {
        if (plain[i] > 64 && plain[i] < 97)
            plain[i] += 32;
    }
}

int removeSpaces(char* plain, int ps)
{
    int i, count = 0;
    for (i = 0; i < ps; i++)
        if (plain[i] != ' ')
            plain[count++] = plain[i];
    plain[count] = '\0';
    return count;
}

void generateKeyTable(char key[], int ks, char keyT[5][5])
{
    int i, j, k, flag = 0, *dicty;
    dicty = (int*)calloc(26, sizeof(int));
    for (i = 0; i < ks; i++) {
        if (key[i] != 'j')
            dicty[key[i] - 97] = 2;
    }
    dicty['j' - 97] = 1;

    i = 0;
    j = 0;

    for (k = 0; k < ks; k++) 
    {
        if (dicty[key[k] - 97] == 2) 
        {
            dicty[key[k] - 97] -= 1;
            keyT[i][j] = key[k];
            j++;
            if (j == 5) 
            {
                i++;
                j = 0;
            }
        }
    }

    for (k = 0; k < 26; k++) 
    {
        if (dicty[k] == 0) 
        {
            keyT[i][j] = (char)(k + 97);
            j++;
            if (j == 5) {
                i++;
                j = 0;
            }
        }
    }
}

void search(char keyT[5][5], char a, char b, int arr[])
{
    int i, j;

    if (a == 'j')
        a = 'i';
     if (b == 'j')
        b = 'i';

    for (i = 0; i < 5; i++)
    {
        for (j = 0; j < 5; j++)
        {
            if (keyT[i][j] == a)
            {
                arr[0] = i;
                arr[1] = j;
            }
             if (keyT[i][j] == b) {
                arr[2] = i;
                arr[3] = j;
            }
        }
    }
}

int mod5(int a) { return (a % 5); }

int prepare(char str[], int ptrs)
{
    if (ptrs % 2 != 0) {
        str[ptrs++] = 'z';
        str[ptrs] = '\0';
    }
    return ptrs;
}

void encrypt(char str[], char keyT[5][5], int ps)
{
    int i, a[4];

    for (i = 0; i < ps; i += 2)
    {
        search(keyT, str[i], str[i + 1], a);
        if (a[0] == a[2])
        {
            str[i] = keyT[a[0]][mod5(a[1] + 1)];
            str[i + 1] = keyT[a[0]][mod5(a[3] + 1)];
        }
        else if (a[1] == a[3])
        {
            str[i] = keyT[mod5(a[0] + 1)][a[1]];
            str[i + 1] = keyT[mod5(a[2] + 1)][a[1]];
        }
        else
        {
            str[i] = keyT[a[0]][a[3]];
            str[i + 1] = keyT[a[2]][a[1]];
        }
    }
}

void encryptByPlayfairCipher(char str[], char key[])
{
    char ps, ks, keyT[5][5];

    ks = strlen(key);
    ks = removeSpaces(key, ks);
    toLowerCase(key, ks);

    ps = strlen(str);
    ps = removeSpaces(str, ps);
    toLowerCase(str, ps);

    ps = prepare(str, ps);

    generateKeyTable(key, ks, keyT);

    encrypt(str, keyT, ps);
}

int main()
{
    char str[SIZE], key[SIZE];

    printf("Enter the key text: ");
    scanf("%s", key);

    printf("Enter the plaintext: ");
    scanf("%s", str);

    encryptByPlayfairCipher(str, key);

    printf("Cipher text: %s\n", str);

    return 0;
}

3. HILL CIPHER

#include<stdio.h>
#include<string.h>
#include<ctype.h>
int N;
char et[30];
char dt[30];

void hillcipheren(int keymatrix[N][N],char plaintext[],int l)
{
    int ptmatrix[l][1],result[l][1];
    int x=0;
    while(x<strlen(plaintext)){
    
    for(int i=0;i<l;i++){
        if((x+i)<strlen(plaintext)){
            ptmatrix[i][0]=(int)tolower(plaintext[x+i])-97;
        }
        else{
            ptmatrix[i][0]=((int)'z')-97;
        }
    }
    
    for (int i = 0; i < l; ++i)
    {
          for (int j = 0; j < 1; ++j) 
          {
              result[i][j]=0;
                 for (int k = 0; k < l; ++k) {
                    result[i][j] += keymatrix[i][k] * ptmatrix[k][j];
                    }
                 et[x+i]=(result[i][j]%26)+97;
          }
    }
    
    x=x+l;
    }
}

void hillcipherde(int invkeymatrix[N][N],char enctext[],int l)
{
    int etmatrix[l][1],result1[l][1];
    int x=0;
    while(x<strlen(enctext)){
    
        for(int i=0;i<l;i++){
            if((x+i)<strlen(enctext)){
            etmatrix[i][0]=(int)tolower(enctext[x+i])-97;
            }
        }
        for (int i = 0; i < l; ++i) {
              for (int j = 0; j < 1; ++j) {
              result1[i][j]=0;
                 for (int k = 0; k < l; ++k) {
                 result1[i][j] += invkeymatrix[i][k] * etmatrix[k][j];
                         }
                 dt[x+i]=(result1[i][j]%26)+97;
                 }
        }
        x=x+l;
    }
}
void getCofactor(int A[N][N], int temp[N][N], int p, int q, int n)
{
	int i = 0, j = 0;
	for (int row = 0; row < n; row++)
	{
		for (int col = 0; col < n; col++)
		{

			if (row != p && col != q)
			{
				temp[i][j++] = A[row][col];

				if (j == n - 1)
				{
					j = 0;
					i++;
				}
			}
		}
	}
}


int determinant(int A[N][N], int n)
{
	int D = 0;
	if (n == 1)
		return A[0][0];
	int temp[N][N];
	int sign = 1;

	for (int f = 0; f < n; f++)
	{

		getCofactor(A, temp, 0, f, n);
		D += sign * A[0][f] * determinant(temp, n - 1);


		sign = -sign;
	}
	return D;
}


void adjoint(int A[N][N],int adj[N][N])
{
	if (N == 1)
	{
		adj[0][0] = 1;
		return;
	}

	int sign = 1, temp[N][N];
	for (int i=0; i<N; i++)
	{
		for (int j=0; j<N; j++)
		{

			getCofactor(A,temp, i, j, N);


			sign = ((i+j)%2==0)? 1: -1;


			adj[j][i] = (sign)*(determinant(temp, N-1));
		}
	}
}


int inverse(int A[N][N])
{

	int det = determinant(A, N);
	if (det == 0)
	{
		printf("Singular matrix, can't find its inverse");
		return 0;
	}
	printf("\ndeterminant=%d\n",det);
	return det;
}


 int multipleinverse(int r2){
     int t1=0,t2=1,q=0;
     int t,r1=26,r;
     while(r2!=0){
         q=r1/r2;
         r=r1%r2;
         t=(t1-(t2*q));
         r1=r2;
         r2=r;
         t1=t2;
         t2=t;
     }
     return t1;
 }


void main()
{
    int z;
    int det,mi;
    char plaintext[30],key[30];
    float s;
    printf("enter the plain text:\n");
    scanf("%s",plaintext);
    printf("\nenter n\n");
    scanf("%d",&N);
    int A[N][N];
    int adj[N][N];
    printf("\nenter input matrix\n");
    for (int i=0; i<N; i++){
    		for (int j=0; j<N; j++){
    			scanf( "%d",&A[i][j]);
    	}
    }
    	printf( "\nInput matrix is :\n");
    	for (int i=0; i<N; i++){
    		for (int j=0; j<N; j++){
    			printf( "%d \t",A[i][j]);
    	}
    printf("\n");
    }
    hillcipheren(A,plaintext,N);
    printf("\nencrypted text:\n");
    printf("%s \n\n",et);
    printf("adjoint matrix:\n");
    adjoint(A, adj);
    for (int i=0; i<N; i++){
    for (int j=0; j<N; j++){
    printf( "%d \t",adj[i][j]);
    	}
    printf("\n");
    }
    det=inverse(A);
    if(det==0){
    printf("inverse does not exist\n");
    return;
    }
    else
    {
    	mi=multipleinverse(det%26);
    	printf("\nmultiple inverse is :%d\n",mi);
    	if(det<0){
    	z=-1;
    }
    else{
    	z=1;
    }
    for (int i=0; i<N; i++){
    		for (int j=0; j<N; j++){
    			adj[i][j]=(z*mi*adj[i][j])%26;
    			if(adj[i][j]<0){
    			adj[i][j]=26+adj[i][j];
    			}
    	}
    }
    printf("\ninverse matrix:\n");
    for (int i=0; i<N; i++){
    		for (int j=0; j<N; j++){
    			printf( "%d \t",adj[i][j]);
    	}
    printf("\n");
    }
    	}
    hillcipherde(adj,et,N);
    printf("\ndecrypted text:\n");
    printf("%s \n",dt);
}


4. VIGENERE CIPHER

#include<stdio.h>

#include<string.h>

int main() {
  char msg[30], key[30];
  int i, j;
  char A[27][27];
  
  printf("Enter the plaintext:");
  scanf("%s", msg);
  
  printf("Enter the key:");
  scanf("%s", key);
  
  int msgLen = strlen(msg);
  int keyLen = strlen(key);
  
  for (i = 0; i < 26; i++)
  {
    for (j = 0; j < 26; j++)
    {
      A[i][j] = 'A' + ((i + j) % 26);
    }
  }
  
  for (i = 0; i < 26; i++)
  {
    for (j = 0; j < 26; j++)
    {
      printf("%c", A[i][j]);
    }
    printf("\n");
  }
  
  char newKey[msgLen], encryptedMsg[msgLen], decryptedMsg[msgLen];
  for (i = 0, j = 0; i < msgLen; ++i, ++j)
  {
    if (j == keyLen)
      j = 0;

    newKey[i] = key[j];
  }
  
  newKey[i] = '\0';
  
  for (i = 0; i < msgLen; ++i)
    encryptedMsg[i] = ((msg[i] + newKey[i]) % 26) + 'A';
  encryptedMsg[i] = '\0';
  
  for (i = 0; i < msgLen; ++i)
    decryptedMsg[i] = (((encryptedMsg[i] - newKey[i]) + 26) % 26) + 'A';
  decryptedMsg[i] = '\0';
  
  printf("Original Message: %s", msg);
  printf("\nKey: %s", key);
  printf("\nNew Generated Key: %s", newKey);
  printf("\nEncrypted Message: %s", encryptedMsg);
  printf("\nDecrypted Message: %s", decryptedMsg);

  return 0;
}


5. RAIL FENCE (do not work with spaces in plain txt)

#include<stdio.h>
#include<string.h>
char encrypt(char msg[], int key){
    int msgLen = strlen(msg), i, j, k = -1, row = 0, col = 0;
    char Matrix[key][msgLen];
    for(i = 0; i < key; ++i)
        for(j = 0; j < msgLen; ++j)
            Matrix[i][j] = '\n';
    for(i = 0; i < msgLen; ++i){
        Matrix[row][col++] = msg[i];
        if(row == 0 || row == key-1)
            k= k * (-1);
        row = row + k;
    }
    printf("\nEncrypted Message: \n");
    for(i = 0; i < key; ++i)
        for(j = 0; j < msgLen; ++j)
            if(Matrix[i][j] != '\n')
                printf("%c", Matrix[i][j]);
}
void decrypt(char enMsg[], int key){
    int msgLen = strlen(enMsg), i, j, k = -1, row = 0, col = 0, m = 0;
    char Matrix[key][msgLen];
    for(i = 0; i < key; ++i)
        for(j = 0; j < msgLen; ++j)
            Matrix[i][j] = '\n';
    for(i = 0; i < msgLen; ++i){
        Matrix[row][col++] = '*';
        if(row == 0 || row == key-1)
            k= k * (-1);
        row = row + k;
    }
 
    for(i = 0; i < key; ++i)
        for(j = 0; j < msgLen; ++j)
            if(Matrix[i][j] == '*')
                Matrix[i][j] = enMsg[m++];
    row = col = 0;
    k = -1;
    printf("\nDecrypted Message: ");
    for(i = 0; i < msgLen; ++i){
        printf("%c",Matrix[row][col++]);
        if(row == 0 || row == key-1)
            k= k * (-1);
        row = row + k;
    }
}
 
int main(){
    char msg[50]; 
    char enMsg[50];
    int key; 
    printf("enter the message\n");
    scanf("%s", msg);
    printf("enter the key\n");
    scanf("%d",&key);
    printf("Original Message: %s\n", msg);
    encrypt(msg, key);
    printf("\nenter the encrypted msg to decrypt\n");
    scanf("%s", enMsg);
    decrypt(enMsg, key);
    return 0;
}

6. DES

#include<stdio.h>
int key1[8],key2[8];
int n,i,j;
void leftshift(int key[10],int num)
{
    int temp1,temp2;
    for(j=0;j<num;j++)
    {
        temp1=key[0];
        for(i=0;i<4;i++)
        {
            key[i]=key[i+1];
        }
        key[4]=temp1;
        temp2=key[5];
        for(i=5;i<9;i++)
        {
            key[i]=key[i+1];
        }
        key[9]=temp2;
    }
}

void keygeneration(int key[10])
{
    int p10[10]={3,5,2,7,4,10,1,9,8,6},p8[8]={6,3,7,4,8,5,10,9};
    int keyp10[10];
    
    for(i=0;i<10;i++)
    {
        keyp10[i]=key[(p10[i]-1)]; 
    }
    leftshift(keyp10,1);
    printf("key1:");
    for(i=0;i<8;i++)
    {
        key1[i]=keyp10[(p8[i]-1)];
        printf("%d",key1[i]);
    }
    leftshift(keyp10,2);
    printf("\nkey2:");
    for(i=0;i<8;i++)
    {
        key2[i]=keyp10[(p8[i]-1)];
        printf("%d",key2[i]);
    }
}

void sboxfunction(int sr[4],int xor[8])
{
    int sbox[2][2]={{0,1},{2,3}};
    int s0[4][4]={{1,0,3,2},{3,2,1,0},{0,2,1,3},{3,1,3,2}};
    int s1[4][4]={{0,1,2,3},{2,0,1,3},{3,0,1,0},{2,1,0,3}}; 
    int sresult[2];
    i=0;
    sresult[0]=s0[sbox[xor[0]][xor[3]]][sbox[xor[1]][xor[2]]];
    sresult[1]=s1[sbox[xor[4]][xor[7]]][sbox[xor[5]][xor[6]]];
    for(j=0;j<2;j++)
    {
        switch (sresult[j])
        {
            case 0:sr[i++]=0;
            sr[i++]=0;
            break;
            case 1:sr[i++]=0;
            sr[i++]=1;
            break;
            case 2:sr[i++]=1;
            sr[i++]=0;
            break;
            case 3:sr[i++]=1;
            sr[i++]=1;
            break;
        }
    }
}

void cryption(int pt[8],int k1[8],int k2[8])
{
    int ip[8]={2,6,3,1,4,8,5,7};
    int sr[4],et[8];
    int inverseip[8]={4,1,3,5,7,2,8,6};
    int ep[8]={4,1,2,3,2,3,4,1};
    int aip[8],aep[8],xor[8],as[8],as1[8];
    int p4[4]={2,4,3,1};
    //intial permutation
    for(i=0;i<8;i++)
    {
        aip[i]=pt[(ip[i]-1)];
    }
    //expansion permutation
    for(i=0;i<8;i++)
    {
        aep[i]=aip[(ep[i]+3)];
    }
    //xor of key1(for encryption)/key2(for decryption) and expamsion permutation
    for(i=0;i<8;i++)
    {
        xor[i]=aep[i]^k1[i];
    }
    
    sboxfunction(sr,xor);//finding sbox values
    
    //creation of array on which expansion permutation is applied
    for(i=0;i<4;i++)
    {
        as[i+4]=sr[p4[i]-1]^aip[i];
        as[i]=aip[i+4];
    }
    
    //expansion permutation
    for(i=0;i<8;i++)
    {
        aep[i]=as[(ep[i]+3)];
    }
    
    //xor of key2(for encryption)/key1(for decryption) and expamsion permutation
    for(i=0;i<8;i++)
    {
        xor[i]=aep[i]^k2[i];
    }
    
    sboxfunction(sr,xor);
    
    //creation of array to which inverse initial permutation is applied
    for(i=0;i<4;i++)
    {
        as1[i]=sr[p4[i]-1]^as[i];
        as1[i+4]=as[i+4];
    }
    
    if(n==1)
    {printf("\nencrypted text:");}
    else
    {printf("\n decrypted text:");}
    
    //inverse initial permutation
    for(i=0;i<8;i++)
    {
        et[i]=as1[(inverseip[i]-1)];
        printf("%d",et[i]);
    }
}

void main()
{
    int key[10],pt[8];
    
    //plain text input
    printf("enter the 8 bit text:\n");
    for(i=0;i<8;i++)
    {
        scanf("%d",&pt[i]);
    }
    //key input
    printf("enter the 10 bit key:\n");
    for(i=0;i<10;i++)
    {
        scanf("%d",&key[i]);
    }
    //printing plaintext and key
    printf("the 8 bit text:");
    for(i=0;i<8;i++)
    {
        printf("%d",pt[i]);
    }
    printf("\nthe 10 bit key:");
    for(i=0;i<10;i++)
    {
        printf("%d",key[i]);
    }
    printf("\nenter 1 for encryption or 2 for decryption:");
    scanf("%d",&n);
    //key generation 
    keygeneration(key);
    
    //encryption and decryption
    switch (n)
    {
        case 1 :cryption(pt,key1,key2);
        break;
        case 2:cryption(pt,key2,key1);
        break;
        default:printf("invalid input");
        break;
    }
}


7. RSA 

#include<stdio.h>
#include<stdlib.h>
int prime(int n) 
{
	int i;
	int m = n / 2;
	for (i = 2; i <= m; i++) 
	{
		if (n % i == 0) 
		{
			return 0; 
		}
	}
	return 1; 
}

int GCD(int a, int b) {
	if(a==0)
	    return b;
	    
	return GCD(b%a , a); 
}


int powmod(int a, int m, int n)
{
    int r;
    int y = 1;
    while (m > 0)
    {
        r = m % 2;
        if (r == 1) {
            y = (y*a) % n;
        }
        a = a*a % n;
        m = m / 2;
    }
    return y%n;
}

int main()
{
	int n,p,q,phi_n;
	int data,cipher,decrypt;
	printf("Enter p and q:\n");
	scanf("%d %d",&p,&q);
	if(prime(p)==0 || prime(q)==0)
	{
		printf("invalid input");
		exit(1);
	}
	n=p*q;
	phi_n=(p-1)*(q-1);
	int e,d;
	printf("Enter the value of e: \n");
	scanf("%d",&e);
	for (e = e; e <= 100; e++) {
		if (GCD(phi_n, e) == 1)
			break;
	}
	for (int i = 1; i < phi_n; i++)
		if ((i * e) %phi_n== 1)
				d=i;	
	printf("Value of d: %d\n",d);
	printf("Enter some numerical data: ");
	scanf("%d", &data);
	cipher = powmod(data, e, n);
	printf("The cipher text is: %d\n", cipher);
	decrypt = powmod(cipher, d, n);
	printf("The decrypted text is: %d\n", decrypt);
	return 0;
}

8. DIFFIE HELLMAN


#include <stdio.h>
int compute(int a, int m, int n)
{
    int r;
    int y = 1;
    while (m > 0)
    {
        r = m % 2;
        if (r == 1) {
            y = (y*a) % n;
        }
        a = a*a % n;
        m = m / 2;
    }
    return y;
}
int main()
{
    int p,g,A,B;            
    int Xa, Xb;      
    printf("Enter the common prime no.: ");
    scanf("%d",&p);
    printf("Enter the primitive root of %d : ",p);
    scanf("%d",&g);
    printf("Enter the private key of A 'Xa':  ");
    scanf("%d",&Xa);      
    A = compute(g, Xa, p);
    printf("Enter the private key of B 'Xb':  ");
    scanf("%d",&Xb);       
    B = compute(g, Xb, p);
    int keyA = compute(B, Xa, p);
    int keyB = compute(A, Xb, p);
    printf("Public Key of A:%d\n",A);
    printf("Public Key of B:%d\n",B);
    printf("Alice's secret key is %d\nBob's secret key is %d\n", keyA, keyB);
    return 0;
}

